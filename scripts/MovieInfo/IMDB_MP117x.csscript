//css_reference System.Core;

//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";
//css_reference "Newtonsoft.Json.dll";

using MediaPortal.GUI.Library;
using MediaPortal.Util;
using MediaPortal.Video.Database;

using Newtonsoft.Json;

using System;
using System.Text;
using System.IO;
using System.Linq;
using System.Net;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using System.Text.RegularExpressions;

using System.Windows.Forms;

internal class Grabber : MarshalByRefObject, IIMDBScriptGrabber
{
  const string strGrabber = "IMDB_MP117x";
  const string strGrabberVersion = "20230430.I";

  public const string TITLE_MASK = "{0}{1}{2}";                 // {0} - Title {1} - Separator {2} - Original Title {3} - Year
  public const string TITLE_SEPARATOR = " / ";

  public void FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
    Log.Info("{0} Version: {1}", strGrabber, strGrabberVersion);
    Log.Debug("{0} Search start: {1} {2}", strGrabber, strSearch, iLimit);
    
    int year = 0; // Year from search string
    int yearIMDB = 0; // Year from IMDB movie
    int yearAccuracy = 1; // Year accuracy check - checks in searchstring for (year number) or [year number]

    string regexPattern = string.Empty;

    // If string contains tt number use it
    if (Regex.Match(strSearch, @"tt\d{7,8}").Success)
    {
      string ttNumber = Regex.Match(strSearch, @"(?<imdbID>tt\d{7,8})").Groups["imdbID"].Value;
      string imdbUrl = string.Format(IMDB_BaseUrl, ttNumber);
      IMDB.IMDBUrl url = new IMDB.IMDBUrl(imdbUrl, ttNumber, strGrabber);
      elements.Add(url);
      Log.Info("{0} Direct IMDB ID link [{1}] added from search string: [{2}]", strGrabber, imdbUrl, strSearch);
      return;
    }

    // Get year from search string
    Regex rx = new Regex(@"^(.*)?[\[\(](19\d{2}|20\d{2})[\]\)]");
    Match match = rx.Match(strSearch);

    if (match.Success)
    {
      year = int.Parse(match.Groups[2].Value);
      strSearch = Regex.Replace(strSearch, @"\+[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
    }

    // If year is empty try workaround
    if (year == 0)
    {
      rx = new Regex(@"\+(\d\d\d\d$)");
      MatchCollection mcYear = rx.Matches(strSearch);
      if (mcYear.Count > 0)
      {
        int lastIndex = mcYear.Count - 1;
        year = Convert.ToInt32(mcYear[lastIndex].Value);
      }
    }

    // Try to find year without brackets
    if (year == 0)
    {
      string strYearIMDB = Regex.Match(strSearch, @"\+\d\d\d\d").Value.Replace("+", "");

      if (!string.IsNullOrEmpty(strYearIMDB))
      {
        strYearIMDB = "+(" + strYearIMDB + ")";
        strSearch = Regex.Replace(strSearch, @"\+\d\d\d\d", strYearIMDB);
        rx = new Regex(@"^(.*)?[\[\(](19\d{2}|20\d{2})[\]\)]");
        match = rx.Match(strSearch);
      }

      if (match.Success)
      {
        year = int.Parse(match.Groups[2].Value);
        strSearch = Regex.Replace(strSearch, @"\+[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
      }
    }

    Log.Info("{0} Search for: {1}, Year: {2}", strGrabber, strSearch, year > 0 ? year.ToString() : "-");

    try
    {
      string absoluteUri;
      string strUrl = string.Format(IMDB_Find, strSearch);
      Log.Debug("{0} Search url: {1}", strGrabber, strUrl);

      string strBody = GetPage(strUrl, "utf-8", out absoluteUri);
      // strBody = Regex.Match(strBody, @"<section\sclass=""posters"">.*?</section>", RegexOptions.IgnoreCase | RegexOptions.Singleline | RegexOptions.Compiled).Value;

      // Direct hit test
      if (strBody.Contains("<div class=\"mainInfo\">"))
      {
        regexPattern = @"<title>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
        string strTitle = Regex.Match(strBody, regexPattern).Groups["movieTitle"].Value.Replace("IMDb -", string.Empty).Trim();
        // Year
        string strYear = Regex.Match(strBody, regexPattern).Groups["movieYear"].Value;

        if (strTitle != string.Empty && strYear != string.Empty)
        {
          HTMLUtil htmlUtil = new HTMLUtil();
          htmlUtil.ConvertHTMLToAnsi(strTitle, out strTitle);
          strTitle = strTitle.Replace("\n", "");
          IMDB.IMDBUrl url = new IMDB.IMDBUrl(absoluteUri.Replace("m.imdb", "www.imdb"), strTitle, strGrabber);
          elements.Add(url);
          Log.Info("{0} Direct hit for search string [{1}]", strGrabber, strSearch);
        }
        return;
      }

      // regexPattern = @"<a\shref=""/title/(?<ttnumber>.*?)/.*?>(?<title>.*?)</a>(?<option>.*?)</div>";
      // regexPattern = @"<a\shref=.\/title\/(?<ttnumber>tt\d+?)\/[\s\S]+?span[^>]+?h3.>(?<title>[^<]+?)<\/span>[^<]+?<div class=.unbold.>[^<]*?\((?<year>\d{4})\)[^<]*?(?:\((?<option>[^<]+?)\)[^<]*?)?<";
      regexPattern = @"href=.\/title\/(?<ttnumber>tt\d+?)\/[^>]+?>(?<title>[^<]+?)<\/a><ul[^>]+?><li[^>]+?><span[^>]+?>(?<year>\d{4})<\/span";

      MatchCollection mc = Regex.Matches(strBody, regexPattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
      if (mc.Count != 0)
      {
        Log.Info("{0} Found {1} matching movies for {2}. Filtering results.", strGrabber, mc.Count, strSearch);
        foreach (Match m in mc)
        {
          string ttnumber = string.Empty;
          string title = string.Empty;
          string syear = string.Empty;
          // string option = string.Empty;

          ttnumber = m.Groups["ttnumber"].Value;
          title = m.Groups["title"].Value;
          syear = m.Groups["year"].Value;
          /*
          option = m.Groups["option"].Value.Trim();
          bool bSkipThisEntry = option.ToLowerInvariant().Contains("tv series") ||
                                option.ToLowerInvariant().Contains("tv mini-series") ||
                                option.ToLowerInvariant().Contains("tv special") ||
                                option.ToLowerInvariant().Contains("tv short") ||
                                option.ToLowerInvariant().Contains("vg") ||
                                option.ToLowerInvariant().Contains("tv episode") ||
                                option.ToLowerInvariant().Contains("short") ||
                                option.ToLowerInvariant().Contains("video game");
          if (!bSkipThisEntry && year != 0)
          */
          bool bSkipThisEntry = false;
          if (year != 0)
          {
            if (!string.IsNullOrEmpty(syear))
            {
              if (!Int32.TryParse(syear, out yearIMDB))
              {
                bSkipThisEntry = true;
              }
            }

            if (!bSkipThisEntry)
            {
              if (year != yearIMDB && (year - yearAccuracy) != yearIMDB && (year + yearAccuracy) != yearIMDB)
              {
                bSkipThisEntry = true;
              }
            }
          }

          if (!bSkipThisEntry)
          {
            string pageLink = string.Format(IMDB_BaseUrl, ttnumber);
            title = title.Replace("\n", "");
            // IMDB.IMDBUrl url = new IMDB.IMDBUrl(pageLink, string.Format("{0} ({2}) {1}", title, option, syear), strGrabber);
            IMDB.IMDBUrl url = new IMDB.IMDBUrl(pageLink, string.Format("{0} ({1})", title, syear), strGrabber);
            elements.Add(url);
          }
        }
        Log.Info("{0} Total returned movie count {1}", strGrabber, elements.Count);
      }
      else
      {
        Log.Info("{0} Movies not found for {1}", strGrabber, strSearch);
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} Exception for IMDB lookup of {1} err:{2} stack:{3}", strGrabber, strSearch, ex.Message, ex.StackTrace);
    }
  }

  //Movie details
  public bool GetDetails(IMDB.IMDBUrl url, ref IMDBMovie movieDetails)
  {
    Log.Info("{0} Version: {1}", strGrabber, strGrabberVersion);

    try
    {
      movieDetails.Reset();
      movieDetails.Database = strGrabber;
      Log.Info("{0} Script GetDetails for: {1}", strGrabber, url.URL);

      string absoluteUri;
      string strBody = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(strBody))
      {
        return false;
      }

      string regexBlockPattern = string.Empty;
      string regexPattern = string.Empty;
      string block = string.Empty;

      // IMDB Number
      int iPos = absoluteUri.IndexOf("/title/");

      if (iPos > 0)
      {
        iPos += "/title/".Length;
        movieDetails.IMDBNumber = absoluteUri.Substring(iPos);
        int pos = movieDetails.IMDBNumber.IndexOf("/");

        if (pos > 0)
        {
          movieDetails.IMDBNumber = movieDetails.IMDBNumber.Substring(0, pos);
        }
      }

      string regex = @"type=.application\/ld\+json.>(?<json>{.+?})<";
      string json = Regex.Match(strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
      if (string.IsNullOrEmpty(json))
      {
        Log.Debug("{0} GetDetails IMDB = {1}, JSON not found.", strGrabber, movieDetails.IMDBNumber);
        return false;
      }

      try
      {
        JsonIMDBMovie Movie = JsonConvert.DeserializeObject<JsonIMDBMovie>(json);
        if (Movie == null)
        {
          Log.Debug("{0} GetDetails IMDB = {1}, JSON changed!?.", strGrabber, movieDetails.IMDBNumber);
          return false;
        }

        string sYear = !string.IsNullOrWhiteSpace(Movie.datePublished) && Movie.datePublished.Length >= 4 ? Movie.datePublished.Substring(0, 4) : string.Empty;

        // Make Title by TITLE_MASK {0} - Title {1} - Separator {2} - Original Title {3} - Year
        string ResultTitleMask = TITLE_MASK;
        if (!string.IsNullOrEmpty(ResultTitleMask))
        {
          if (Movie.name.Equals(Movie.alternateName, StringComparison.CurrentCultureIgnoreCase))
          {
            ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
          }
          if (string.IsNullOrEmpty(Movie.name) || string.IsNullOrEmpty(Movie.alternateName))
          {
            ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Trim();
          }
          if (string.IsNullOrEmpty(sYear))
          {
            ResultTitleMask = ResultTitleMask.Replace("({3})", string.Empty).Replace("[{3])", string.Empty).Replace("{3}", string.Empty).Trim();
          }

          movieDetails.Title = string.Format(ResultTitleMask, Movie.name, TITLE_SEPARATOR, Movie.alternateName, sYear);
          if (!string.IsNullOrEmpty(movieDetails.Title))
          {
            movieDetails.Title = movieDetails.Title.Trim();
          }

        }

        if (!string.IsNullOrEmpty(sYear))
        {
          int iYear;
          int.TryParse(sYear, out iYear);
          movieDetails.Year = iYear;
        }
        Log.Debug("{0} IMDB {1} ({2})", strGrabber, movieDetails.Title, movieDetails.Year);

        movieDetails.ThumbURL = Movie.image.Replace(".jpg","UX" + Convert.ToString((int)Thumbs.ThumbLargeResolution) + ".jpg");

        // Director
        if (Movie.director != null && Movie.director.Count > 0)
        {
          foreach (JsonIMDBPerson director in Movie.director)
          {
            if (director.type == "Person")
            {
              movieDetails.Director = director.name;
              break;
            }
          }
        }

        // Writers
        if (Movie.creator != null && Movie.creator.Count > 0)
        {
          foreach (JsonIMDBPerson creator in Movie.creator)
          {
            if (creator.type == "Person")
            {
              movieDetails.WritingCredits += (!string.IsNullOrEmpty(movieDetails.WritingCredits) ? " / " : string.Empty) + creator.name;
            }
          }
        }

        // Genres
        if (Movie.genre != null && Movie.genre.Count > 0)
        {
          foreach (string genre in Movie.genre)
          {
            movieDetails.Genre += (!string.IsNullOrEmpty(movieDetails.Genre) ? " / " : string.Empty) + genre;
          }
        }

        // MPAA Rating
        // No user country or IMDB USA, show NR
        if (!string.IsNullOrEmpty(Movie.contentRating))
        {
          movieDetails.MPARating = Movie.contentRating;
        }
        else
        {
          movieDetails.MPARating = "NR";
        }

        // Rating
        if (Movie.aggregateRating != null)
        {
          movieDetails.Rating = (float)Movie.aggregateRating.ratingValue;

          if (movieDetails.Rating > 10.0f)
          {
            movieDetails.Rating /= 10.0f;
          }
          movieDetails.Votes = Movie.aggregateRating.ratingCount.ToString();
        }

        // Plot short
        if (Movie.description != null)
        {
          movieDetails.PlotOutline = Movie.description.Trim();
        }
      }
      catch (Exception ex)
      {
        Log.Debug("{0} GetDetails IMDB = {1}, Exception {2}, JSON changed!?.", strGrabber, movieDetails.IMDBNumber, ex.Message);
        return false;
      }

      // Actors
      // regexPattern =  @"href=""/name/nm\d{7,8}/.*?alt=""(?<actor>.*?)"".*?<td.class=""character"">.*?<div>(?<role>.*?)</div>";
      // regexBlockPattern = @"<table class=.cast.>.*?<\/table>|<table class=.cast_list.>.*?<\/table>";
      regexBlockPattern = @"<span>Top cast<\/span>.+?Director<\/span>";
      // regexPattern =  @"href=.\/name\/nm\d{7,8}\/.*?alt=""(?<actor>.*?)"".*?<td.class=.character.>.*?<a[^>]+?>(?<role>.*?)<\/a>";
      regexPattern =  @"href=.\/name\/nm\d{7,8}\/.*?label=.(?<actor>.*?).>.+?href=.\/title\/tt\d{7,8}\/characters\/nm\d{7,8}.*?cast-item-characters-link.><span class=[^>]+?>(?<role>.*?)<\/span>";
      Match castBlock = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline);
      string strCastBlock = HttpUtility.HtmlDecode(castBlock.Value);

      if (!string.IsNullOrEmpty(strCastBlock))
      {
        MatchCollection mc = Regex.Matches(strCastBlock, regexPattern, RegexOptions.Singleline);

        string strActor = string.Empty;
        string strRole = string.Empty;

        if (mc.Count != 0)
        {
          foreach (Match m in mc)
          {
            strActor = string.Empty;
            strActor = m.Groups["actor"].Value;
            strActor = Utils.stripHTMLtags(strActor).Trim().Replace("\n", "");
            string htmlDecode = HttpUtility.HtmlDecode(strActor);

            if (htmlDecode != null)
            {
              strActor = htmlDecode.Replace(",", ";");
              strRole = string.Empty;
              strRole = m.Groups["role"].Value;
              strRole = Utils.stripHTMLtags(strRole).Trim().Replace("\n", "");
              string decode = HttpUtility.HtmlDecode(strRole);

              if (decode != null)
              {
                strRole = decode.Replace(",", ";").Replace("  ", "").Replace("(", " (").Replace(" /", "/");
                regex = "(\\(.*\\))";
                strRole = Regex.Replace(strRole, regex, "").Trim();
                movieDetails.Cast += strActor;

                if (strRole != string.Empty)
                {
                  movieDetails.Cast += " as " + strRole;
                }

                movieDetails.Cast += "\n";
              }
            }
          }
        }
      }

      // Studios
      movieDetails.Studios = GetStudiosIMDB(strBody);

      // Country
      // regexBlockPattern = @"<h4\sclass=""inline"">Country:</h4>.*?<h4";
      regexBlockPattern = @"Country of origin<\/span>.*?<\/div>";
      regexPattern = @"href=.[^>]+?country[^>]+?>(?<country>[^<]+)<\/a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value.Replace("\n", string.Empty);
      MatchCollection mcCountry = Regex.Matches(block, regexPattern, RegexOptions.Singleline);
      string country = string.Empty;

      foreach (Match ms in mcCountry)
      {
        country = country + ms.Groups["country"].Value + " / ";
        country += (!string.IsNullOrEmpty(country) ? " / " : string.Empty) + ms.Groups["country"].Value;
      }
      if (!string.IsNullOrEmpty(country))
      {
        movieDetails.Country = country.Remove(country.LastIndexOf(" / "));
      }

      // Language from IMDB
      /*
      regexPattern = @"<h4\sclass=""inline"">Language:</h4>.*?url'>(?<language>.*?)</a>";
      string language = Regex.Match(strBody, regexPattern, RegexOptions.Singleline).Groups["language"].Value;
      movieDetails.Language = language;
      */

      // regexBlockPattern = @"<h4\sclass=""inline"">Language:</h4>.*?</div>";
      regexBlockPattern = @"Language<\/span>.*?<\/div>";
      regexPattern = @"href=.[^>]+?language[^>]+?>(?<language>[^<]+)<\/a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      MatchCollection mcLanguages = Regex.Matches(block, regexPattern, RegexOptions.Singleline);
      string languages = string.Empty;

      foreach (Match ml in mcLanguages)
      {
        languages = languages + Utils.stripHTMLtags(ml.Groups["language"].Value) + ", ";
      }

      if (!string.IsNullOrEmpty(languages))
      {
        movieDetails.Language = HttpUtility.HtmlDecode(languages.Remove(languages.LastIndexOf(", ")));
        Log.Debug("{0} Languages: {1}", strGrabber, movieDetails.Language);
      }

      // IMDB MPAA Rating / MPAA Text Description MP1-4846
      string pageURL = string.Format(IMDB_Parents, movieDetails.IMDBNumber);
      string page = GetPage(pageURL, "utf-8", out absoluteUri);
      movieDetails.MPAAText = GetMPARatingText(page);

      // Runtime
      // regexPattern = "<time\\sitemprop=\"duration\".*?(?<movieRuntime>\\d+)\\smin";
      // regexPattern = @"inline.>Runtime:[^>]+?>[^<]*?<time[^>]*?>(?<movieRuntime>\d+)\smin";
      regexPattern = @".runtime.:{.seconds.:(?<movieRuntime>\d+),.displayableProperty.";
      int runtime;
      if (int.TryParse(Regex.Match(strBody, regexPattern).Groups["movieRuntime"].Value, out runtime))
      {
        movieDetails.RunTime = runtime / 60;
      }

      // Tagline
      pageURL = string.Format(IMDB_Taglines, movieDetails.IMDBNumber);
      page = GetPage(pageURL, "utf-8", out absoluteUri);
      movieDetails.TagLine = GetTagLineIMDB(page);
      
      // Plot long
      string strPlotUrl = string.Format(IMDB_Plot, movieDetails.IMDBNumber);
      try
      {
        string strPlotHtml = GetPage(strPlotUrl, "utf-8", out absoluteUri);

        regexBlockPattern = @"Summaries<\/span>.+?ipc-html-content-inner-div.>(?<movieSummaries>[^<]+?)<\/div>(?:.+?ipc-html-content-inner-div.>(?<movieReview>[^<]+?)<span)?";
        string movieSummaries = Regex.Match(strPlotHtml, regexBlockPattern, RegexOptions.Singleline).Groups["movieSummaries"].Value;
        string movieReview = Regex.Match(strPlotHtml, regexBlockPattern, RegexOptions.Singleline).Groups["movieReview"].Value;
        if (!string.IsNullOrEmpty(movieSummaries))
        {
          movieDetails.Plot = movieSummaries;
          if (movieDetails.PlotOutline == string.Empty)
          {
            movieDetails.PlotOutline = movieDetails.Plot;
          }
        }
        if (!string.IsNullOrEmpty(movieReview))
        {
          movieDetails.Plot = movieSummaries + "\n - " + movieReview;
        }

        if (movieDetails.Plot == string.Empty)
        {
          movieDetails.Plot = movieDetails.PlotOutline;
        }
      }
      catch (Exception ex)
      {
        Log.Error("{0} GetPlotDetails error: {1}", strGrabber, ex.Message);
      }

      // Awards
      movieDetails.MovieAwards = GetAwardsIMDB(movieDetails.IMDBNumber); // MP1-4846

      // User review
      movieDetails.UserReview = GetUserReviewIMDB(movieDetails.IMDBNumber);

      string strTechUrl = string.Format(IMDB_Tech, movieDetails.IMDBNumber);
      string strTechHtml = GetPage(strTechUrl, "utf-8", out absoluteUri);
      if (movieDetails.RunTime == 0)
      {
        try
        {
          regexPattern = @">Runtime<.+?\((?<movieRuntime>\d+)\smin";

          Log.Debug("{0} IMDB RunTime: {1}", strGrabber, Regex.Match(strTechHtml, regexPattern).Groups["movieRuntime"].Value);
          int runTime;
          if (int.TryParse(Regex.Match(strTechHtml, regexPattern).Groups["movieRuntime"].Value, out runTime))
          {
            movieDetails.RunTime = runTime;
          }
        }
        catch (Exception ex)
        {
          Log.Error("{0} GetRunTime error: {1}", strGrabber, ex.Message);
        }
      }

      // Get Technical data
      string technical = GetTechnicalIMDB(strTechHtml);
      if (!string.IsNullOrEmpty(technical))
      {
        movieDetails.Plot += "\n\n" + GRABBER_Technical() + ":\n" + technical;
      }

      Log.Info("{0} Get info for {1} succeded.", strGrabber, movieDetails.Title);
      return true;
    }
    catch (Exception ex)
    {
      Log.Error("{0} GetDetails error: {1}", strGrabber, ex.Message);
    }
    return false;
  }

  public string GetName()
  {
    return "IMDB V1.17.x v" + strGrabberVersion;
  }

  public string GetLanguage()
  {
    return "EN";
  }

  private static string GetStudiosIMDB(string page)
  {
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }
    string _studios = string.Empty;

    // string rx_block = @"<h4\sclass=.inline.>Production\sCo:<\/h4>.*?href=.companycredits";
    string rx_block = @"href=[^>]+?companycredits[^>]+?>Production companies<\/a>.+?aria-label=.See more.";
    string rx_line = @"href=.[^>]+?company[^>]+?>(?:<span[^>]+?>)?(?<movieStudios>[^<]+?)<";
    string block = Regex.Match(page, rx_block, RegexOptions.Singleline).Value;

    ArrayList studioList = Parse(block, rx_line);
    if (studioList != null && studioList.Count > 0)
    {
      for (int i = 0; i < studioList.Count; i++)
      {
        Hashtable studioMain = (Hashtable)studioList[i];
        string studio = (string)studioMain["movieStudios"];
        if (!string.IsNullOrEmpty(studio))
        {
          studio = studio.Trim().Replace("\n", string.Empty);
          studio = Utils.stripHTMLtags(studio);
          studio = HttpUtility.HtmlDecode(studio);
          studio = Regex.Replace(studio, @"[ ]{2,}", " ").Replace(", ", " ").Trim();
          _studios = _studios + (string.IsNullOrEmpty(_studios) ? string.Empty : " / ") + studio;
        }
      }
    }

    if (!string.IsNullOrEmpty(_studios))
    {
      Log.Debug("{0} IMDB Studios: {1}", strGrabber, _studios);
    }

    return _studios;
  }

  private static string GetMPARatingText(string IMDBPage)
  {
    string page = IMDBPage;
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }

    string mpaaText = string.Empty;

    // MP1-4846 MPAA Text
    string regexPattern = @"mpaa-rating[\s\S]+?MPAA<\/td[^<]+?<td>(?<CertDesc>[^<]+?)<";
    string CertDescription = Regex.Match(page, regexPattern).Groups["CertDesc"].Value;
    if (!string.IsNullOrEmpty(CertDescription))
    {
      mpaaText = CertDescription.Replace("\n", " ");
      Log.Debug("{0} MPAA Description: {1}", strGrabber, CertDescription.Replace("\n", " "));
    }

    // MP1-4846 MPAA Description
    string MPAADesc = string.Empty;
    string rx_mpaa_block = @"section.id=.advisory\-(?!spoilers)(?<block>[\s\S]+?)<\/section>";
    string rx_mpaa_header = @"h4.class=.ipl-list-title.>(?<header>[^<]+?)<\/h4";
    string rx_mpaa_line = @"li.class=.ipl-zebra-list[^>]+?>(?<text>[\s\S]+?)<div class=";

    ArrayList mpaaList = Parse(page, rx_mpaa_block);
    if (mpaaList != null && mpaaList.Count > 0)
    {
      for (int i = 0; i < mpaaList.Count; i++)
      {
        Hashtable mpaaMain = (Hashtable)mpaaList[i];
        string mpaaMainBlock = (string)mpaaMain["block"];
        if (!string.IsNullOrEmpty(mpaaMainBlock))
        {
          string mpaaHeader = Regex.Match(mpaaMainBlock, rx_mpaa_header).Groups["header"].Value;
          ArrayList mpaaLines = Parse(mpaaMainBlock, rx_mpaa_line);
          if (mpaaLines != null && mpaaLines.Count > 0)
          {
            MPAADesc = MPAADesc + "* " + mpaaHeader + "\n";
            for (int j = 0; j < mpaaLines.Count; j++)
            {
              Hashtable mpaaLine = (Hashtable)mpaaLines[j];
              string mpaaLineText = (string)mpaaLine["text"];
              if (!string.IsNullOrEmpty(mpaaLineText) && !Regex.IsMatch(mpaaLineText, @"\d+?\/\d+?"))
              {
                mpaaLineText = mpaaLineText.Trim().Replace("\n", string.Empty);
                mpaaLineText = Utils.stripHTMLtags(mpaaLineText);
                mpaaLineText = mpaaLineText.Trim();
                MPAADesc = MPAADesc + mpaaLineText + "\n";
              }
            }
          }
        }
      }
    }

    if (!string.IsNullOrEmpty(MPAADesc))
    {
      MPAADesc = HttpUtility.HtmlDecode(MPAADesc);
      MPAADesc = Utils.stripHTMLtags(MPAADesc);
      mpaaText = mpaaText + "\n\n" + MPAADesc;
      Log.Debug("{0} MPAA Text: {1}", strGrabber, MPAADesc.Replace("\n", " "));
    }

    return mpaaText;
  }

  private static string GetTagLineIMDB(string page)
  {
    string rx_line = @"Taglines<\/h1>.+?<div class=.ipc-html-content-inner-div.>(?<tagline>[^<]+?)<\/div";
    string _tagline = ParseSingleValue(page, rx_line, "tagline", true);

    if (!string.IsNullOrEmpty(_tagline))
    {
      _tagline = _tagline.Trim().Replace("\n", string.Empty);
      Log.Debug("{0} IMDB Tagline: {1}", strGrabber, _tagline);
    }
    return _tagline;
  }

  private static string GetUserReviewIMDB(string IMDBID)
  {
    try
    {
      string _reviewURL = string.Format(IMDB_Review, IMDBID);
      string _absoluteUri;
      string _reviewPage = GetPage(_reviewURL, "utf-8", out _absoluteUri);
      if (string.IsNullOrEmpty(_reviewPage))
      {
        return string.Empty;
      }

      string _reviewList = string.Empty;

      _reviewPage = HttpUtility.HtmlDecode(_reviewPage);

      string rx_review_line = @"<span>(?<rating>\d{1,2})<\/span><span[^>]+?>\/(?<maxrating>\d{1,2})<\/span>.+?<a href[^>]+?class=.title[^>]+?>(?<title>[^<]+?)<\/a>.+?<div[^>]+?content.>(?<review>[\s\S]+?)<\/div>";
      ArrayList reviewList = Parse(_reviewPage, rx_review_line);
      if (reviewList != null && reviewList.Count > 0)
      {
        for (int i = 0; i < reviewList.Count; i++)
        {
          Hashtable reviewMain = (Hashtable)reviewList[i];
          string reviewRating = (string)reviewMain["rating"];
          string reviewMaxRating = (string)reviewMain["maxrating"];
          string reviewTitle = (string)reviewMain["title"];
          string reviewText = (string)reviewMain["review"];
          string reviewLine = string.Empty;

          if (!string.IsNullOrEmpty(reviewTitle))
          {
            reviewTitle = reviewTitle.Trim().Replace("\n", string.Empty);
            reviewTitle = Utils.stripHTMLtags(reviewTitle);
            reviewTitle = Regex.Replace(reviewTitle, @"[ ]{2,}", " ").Trim();
          }
          if (!string.IsNullOrEmpty(reviewText))
          {
            reviewText = reviewText.Trim().Replace("\n", string.Empty);
            reviewText = Utils.stripHTMLtags(reviewText);
            reviewText = Regex.Replace(reviewText, @"[ ]{2,}", " ").Trim();
          }
          if (!string.IsNullOrEmpty(reviewText))
          {
            if (!string.IsNullOrEmpty(reviewRating))
            {
              reviewLine = "[" + reviewRating + (!string.IsNullOrEmpty(reviewMaxRating) ? "/" + reviewMaxRating : string.Empty) + "]";
            }
            if (!string.IsNullOrEmpty(reviewTitle))
            {
              reviewLine = reviewLine + " " + reviewTitle + "\n";
            }
            reviewLine = reviewLine + reviewText;
            _reviewList = _reviewList + reviewLine + "\n";
          }
        }
      }

      if (!string.IsNullOrEmpty(_reviewList))
      {
        return _reviewList;
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} IMDB Script GetUserReview error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static string GetAwardsIMDB(string IMDBID)
  {
    // Awards MP1-4846
    try
    {
      string absoluteUri;
      string _awardsURL = string.Format(IMDB_Awards, IMDBID);
      string _awardsPage = GetPage(_awardsURL, "utf-8", out absoluteUri);
      if (string.IsNullOrEmpty(_awardsPage))
      {
        return string.Empty;
      }

      string regex = @"type=.application\/json.>(?<json>{.+?})<";
      string json = Regex.Match(_awardsPage, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
      if (string.IsNullOrEmpty(json))
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON not found.", strGrabber, IMDBID);
      }

      try
      {
        JsonIMDBAwards Awards = JsonConvert.DeserializeObject<JsonIMDBAwards>(json);
        if (Awards == null)
        {
          Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON changed!?.", strGrabber, IMDBID);
        }

        if (Awards.props != null && Awards.props.pageProps != null &&
          (Awards.props.pageProps.contentData == null || Awards.props.pageProps.contentData.nominationsCount == 0))
        {
          Log.Debug("{0} GetIMDBAwards No Awards for IMDB = {1}", strGrabber, IMDBID);
        }

        string _awardsList = string.Empty;
        if (!string.IsNullOrEmpty(Awards.props.pageProps.contentData.entityMetadata.id))
        {
          string AwardsMASK = string.Empty;
          if (Awards.props.pageProps.contentData.winsCount > 0 && Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{0} WINS & {1} NOMINATIONS";
          }
          else if (Awards.props.pageProps.contentData.winsCount > 0)
          {
            AwardsMASK = "{0} WINS";
          }
          else if (Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{1} NOMINATIONS";
          }
          string awardMainTitle = string.Format(AwardsMASK, Awards.props.pageProps.contentData.winsCount,
                                                            Awards.props.pageProps.contentData.nominationsCount);
          if (!string.IsNullOrEmpty(awardMainTitle))
          {
            _awardsList = "::: " + awardMainTitle + " :::\n\n";
          }

          foreach (var category in Awards.props.pageProps.contentData.categories)
          {
            var awards = category.section.items.Where(x => x.rowTitle.Contains("Winner"));
            string awardMainName = string.Empty;
            if (awards.Count() > 0)
            {
              awardMainName = category.name;

              _awardsList += "* " + awardMainName + "\n";
              _awardsList += "Won:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (W): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
              }
            }

            awards = category.section.items.Where(x => x.rowTitle.Contains("Nominee"));
            if (awards.Count() > 0)
            {
              if (string.IsNullOrEmpty(awardMainName))
              {
                awardMainName = category.name;
                _awardsList += "* " + awardMainName + "\n";
              }
              _awardsList += "Nominated:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (N): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
              }
            }
            if (!string.IsNullOrEmpty(awardMainName))
            {
              _awardsList += "\n";
            }
          }
        }

        if (!string.IsNullOrEmpty(_awardsList))
        {
          return "Awards:\n" + _awardsList; // MP1-4846
        }
      }
      catch (Exception ex)
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, Exception {2}, JSON changed!?.", strGrabber, IMDBID, ex.Message);
      }

    }
    catch (Exception ex)
    {
      Log.Error("{0} GetIMDBAwards error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static string GetTechnicalIMDB(string page)
  {
    string regex = @"type=.application\/json.>(?<json>{.+?})<";
    string json = Regex.Match(page, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
    if (string.IsNullOrEmpty(json))
    {
      Log.Debug("{0} IMDB GetTechnical, JSON not found.", strGrabber);
      return string.Empty;
    }

    try
    {
      JsonIMDBTech Tech = JsonConvert.DeserializeObject<JsonIMDBTech>(json);
      if (Tech == null || Tech.props == null || Tech.props.pageProps == null || Tech.props.pageProps.contentData == null)
      {
        Log.Debug("{0} IMDB GetTechnical, JSON changed!?.", strGrabber);
        return string.Empty;
      }

      string technical = string.Empty;
      if (Tech.props.pageProps.contentData.section != null && Tech.props.pageProps.contentData.section.items != null)
      {
        foreach(JsonIMDBItem item in Tech.props.pageProps.contentData.section.items)
        {
          string caption = item.rowTitle;
          string text = string.Empty;
          foreach (JsonIMDBListContent content in item.listContent)
          {
            text += (!string.IsNullOrEmpty(text) ? " | " : string.Empty) + content.text + (!string.IsNullOrEmpty(content.subText) ? " " + content.subText : string.Empty);
          }
          technical += "- " + caption + ": " + text + "\n";
        }
      }

      if (!string.IsNullOrEmpty(technical))
      {
        Log.Debug("{0} IMDB Technical specifications: {1}", strGrabber, technical.Replace("\n", " "));
      }
      return technical;
    }
    catch (Exception ex)
    {
      Log.Debug("{0} IMDB GetTechnical, Exception {1}, JSON changed!?.", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static ArrayList Parse(string input, string pattern) 
  {
    ArrayList keyedMatches = new ArrayList();
    try 
    {
      Regex regEx             = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
      MatchCollection matches = regEx.Matches(input);
      
      // write matches and groups to variables
      foreach (Match currMatch in matches) 
      {
        // store the groups in the match
        if (currMatch.Groups.Count > 1) 
        {
          Hashtable groupings = new Hashtable( );
          for (int i = 1; i < currMatch.Groups.Count; i++)
          {
            groupings.Add(regEx.GroupNameFromNumber(i), currMatch.Groups[i].Value.Trim());
          }
          keyedMatches.Add(groupings);
        }
      }
    }
    catch (Exception e) 
    {
      Log.Error("{0} Regex expression failed! Exception: {1}", strGrabber, e.Message);
      Log.Error(e);
    }
    return keyedMatches;
  }

  private static string ParseSingleValue(string input, string pattern, string name, bool htmlDecode) 
  {
    string result = string.Empty;
      
    ArrayList values = Parse(input, pattern);
    if (values.Count > 0) 
    {
      result = (string)((Hashtable)values[0])[name];
    }
    result = htmlDecode ? HttpUtility.HtmlDecode(result) : result;
    return string.IsNullOrEmpty(result) ? string.Empty : result.Trim();
  }

  private static string GetPage(string strUrl, string strEncode, out string absoluteUri)
  {
    string strBody = string.Empty;
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      //Log.Info("IMDB: get page:{0}", strURL);
      HttpWebRequest req = (HttpWebRequest)WebRequest.Create(strUrl);
      string uu = "BCYmcFe4PTBQ8nEoIcCgT5AJwPk7BAOCg5XsQrvqKyvxEUpEB6KqjE0Uv_pqnPChVCCnD8vgTK3UtK7FGCdw39E2j-Fb5MWegRLgbNA2rFWeYUJbbXhRyUaxqGuuW3AZb1grBhmGMxhDJyH5ntFDj1X1Ejh_jqR6BaQUk6P16AN1EMPstTSBIqxVW08QEqMKQgsK75y8_s1Ss9tyDfZpLZzCWhO5qftGUn3_bbw_DBF6sTZDo6xK-zy88VZ8cws-D30P";
      string id = "BCYobsJMWRwG55i2yGvVuZe7v5twryi7KSxLglDHw2wVcI1rMq0OjHVT7duPo5NNHKDDVFBTVjJM4PoMonlTB_q9NvMCs-wB78Y1hGjdgCLX0SEEC2Y6BD4E3Z6cIoMwlhTDFSprYlxMqjEsFGYwWzVp1oIUYkZQ0kgpX_MvBrEh-fU";
      string cookieHeader = string.Format("uu={0}; id={1}", uu, id);
      req.Headers.Add("Cookie", cookieHeader);
      req.Headers.Add("Accept-Language", "en-US,en;q=0.5");
      req.Timeout = 20000;
      req.ReadWriteTimeout = 20000;

      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = System.Text.Encoding.GetEncoding(strEncode);

      using (sr = new StreamReader(receiveStream, encode))
      {
        strBody = sr.ReadToEnd();
      }

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      Log.Error("{0} Error retreiving WebPage: {1} Encoding:{2} err:{3} stack:{4}", strGrabber, strUrl, strEncode, ex.Message, ex.StackTrace);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception) { }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception) { }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception) { }
      }
    }
    return strBody;
  }

  #region IMDB Parameters

  private const string IMDB_BaseUrl = "https://www.imdb.com/title/{0}/";

  #endregion IMDB Parameters

  #region IMDB Const

  public const string IMDB_Find = "https://m.imdb.com/find/?q={0}";
  public const string IMDB_Plot = "https://m.imdb.com/title/{0}/plotsummary/";

  public const string IMDB_Awards = IMDB_BaseUrl + "awards/";
  public const string IMDB_Parents = IMDB_BaseUrl + "parentalguide/";
  public const string IMDB_Trivia = IMDB_BaseUrl + "trivia/";
  public const string IMDB_Review = IMDB_BaseUrl + "reviews/?sort=totalVotes&dir=desc&ratingFilter=0";
  public const string IMDB_Ratings = IMDB_BaseUrl + "ratings/";
  public const string IMDB_Tech = IMDB_BaseUrl + "technical/";
  public const string IMDB_Taglines = IMDB_BaseUrl + "taglines/";

  #endregion IMDB Const

  #region IMDB Classes

  // IMDB Base
  public class JsonIMDBBase
  {
    [JsonProperty("@type")]
    public string type { get; set; }
  }

  public class JsonIMDBText
  {
    public string text { get; set; }
  }

  public class JsonIMDBPlainText
  {
    public string plainText { get; set; }
  }

  public class JsonIMDBReleaseYear
  {
    public int year { get; set; }
  }

  public class JsonIMDBPlot
  {
    public JsonIMDBPlainText plotText { get; set; }
  }

  public class JsonIMDBPrimaryImage
  {
    public string url { get; set; }
    public int height { get; set; }
    public int width { get; set; }
    public JsonIMDBPlainText caption { get; set; }
  }
  public class JsonIMDBPosterData
  {
    public string constId { get; set; }
    public JsonIMDBPosterImage image { get; set; }
    public string type { get; set; }
  }

  public class JsonIMDBPosterImage
  {
    public string url { get; set; }
    public int maxHeight { get; set; }
    public int maxWidth { get; set; }
    public string caption { get; set; }
  }

  // Movie
  public class JsonIMDBPerson : JsonIMDBBase
  {
    public string url { get; set; }
    public string name { get; set; }
  }

  public class JsonIMDBActor : JsonIMDBPerson
  {
    public string image { get; set; }
    public string description { get; set; }
    public string birthDate { get; set; }
    public string deathDate { get; set; }
  }

  public class JsonIMDBAggregateRating : JsonIMDBBase
  {
    public int ratingCount { get; set; }
    public int bestRating { get; set; }
    public int worstRating { get; set; }
    public double ratingValue { get; set; }
  }

  public class JsonIMDBMovie : JsonIMDBBase
  {
    [JsonProperty("@context")]
    public string context { get; set; }

    public string url { get; set; }
    public string name { get; set; }
    public string alternateName { get; set; }
    public string image { get; set; }
    public string description { get; set; }
    public JsonIMDBAggregateRating aggregateRating { get; set; }
    public string contentRating { get; set; }
    public List<string> genre { get; set; }
    public string datePublished { get; set; }
    public string keywords { get; set; }
    public List<JsonIMDBPerson> actor { get; set; }
    public List<JsonIMDBPerson> director { get; set; }
    public List<JsonIMDBPerson> creator { get; set; }
    public string duration { get; set; }
  }

  // Technical Information
  public class JsonIMDBTech
  {
    public JsonIMDBProps props { get; set; }
  }

  public class JsonIMDBProps
  {
    public JsonIMDBPageProps pageProps { get; set; }
  }

  public class JsonIMDBPageProps
  {
    public JsonIMDBContentData contentData { get; set; }
  }

  public class JsonIMDBContentData
  {
    public string parentDisplayText { get; set; }
    public JsonIMDBEntityMetadata entityMetadata { get; set; }
    public JsonIMDBSection section { get; set; }
  }

  public class JsonIMDBEntityMetadata
  {
    public string id { get; set; }
    public JsonIMDBText titleText { get; set; }
    public JsonIMDBText originalTitleText { get; set; }
    public JsonIMDBReleaseYear releaseYear { get; set; }
    public JsonIMDBPlot plot { get; set; }
    public JsonIMDBPrimaryImage primaryImage { get; set; }
  }

  public class JsonIMDBSection
  {
    public List<JsonIMDBItem> items { get; set; }
  }

  public class JsonIMDBItem
  {
    public string id { get; set; }
    public string rowTitle { get; set; }
    public List<JsonIMDBListContent> listContent { get; set; }
  }

  public class JsonIMDBListContent
  {
    public int id { get; set; }
    public string text { get; set; }
    public string subText { get; set; }
    public string href { get; set; }
  }

  // IMDB Awards
  public class JsonIMDBAwards
  {
    public JsonIMDBAwardsProps props { get; set; }
    public string page { get; set; }
  }

  public class JsonIMDBAwardsProps
  {
    public JsonIMDBAwardsPageProps pageProps { get; set; }
  }

  public class JsonIMDBAwardsPageProps
  {
    public JsonIMDBAwardsContentData contentData { get; set; }
  }

  public class JsonIMDBAwardsContentData
  {
    public string parentDisplayText { get; set; }
    public JsonIMDBEntityMetadata entityMetadata { get; set; }
    public JsonIMDBPosterData posterData { get; set; }
    public List<JsonIMDBAwardsCategory> categories { get; set; }
    public int nominationsCount { get; set; }
    public int winsCount { get; set; }
  }

  public class JsonIMDBAwardsCategory
  {
    public string id { get; set; }
    public string name { get; set; }
    public JsonIMDBAwardsSection section { get; set; }
  }

  public class JsonIMDBAwardsSection
  {
    public int listItemType { get; set; }
    public List<JsonIMDBAwardsSectionItem> items { get; set; }
    public int total { get; set; }
    public string endCursor { get; set; }
  }

  public class JsonIMDBAwardsSectionItem
  {
    public string id { get; set; }
    public List<JsonIMDBAwardsListContent> listContent { get; set; }
    public string rowTitle { get; set; }
    public string rowSubTitle { get; set; }
    public string rowLink { get; set; }
    public List<JsonIMDBAwardsSubListContent> subListContent { get; set; }
  }

  public class JsonIMDBAwardsListContent
  {
    public string className { get; set; }
    public string text { get; set; }
  }

  public class JsonIMDBAwardsSubListContent
  {
    public string text { get; set; }
    public string subText { get; set; }
    public string href { get; set; }
  }

  #endregion

  #region Localization

  public static string API_LANG = CultureInfo.CurrentCulture.TwoLetterISOLanguageName.ToUpperInvariant();

  private static Dictionary<string, string> Technical = new Dictionary<string, string>()
  {
    { "EN", "Our films|Foreign films" },
	{ "RU", "Наши фильмы|Иностранные фильмы" },
	{ "UA", "Наші фільми|Іноземні фільми"},
	{ "DE", "Unsere Filme|Ausländische Filme" }
  };

  private static string GRABBER_Technical()
  {
	string str = Technical.Where(x => x.Key == API_LANG).Select(x => x.Value).FirstOrDefault();
	if (string.IsNullOrEmpty(str))
	{
      str = Technical.Where(x => x.Key == "EN").Select(x => x.Value).FirstOrDefault();
	}
	if (string.IsNullOrEmpty(str))
	{
	  return string.Empty;
	}
    return str;
  }	

  #endregion
}
